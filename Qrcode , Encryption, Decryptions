import qrcode

def validate_message(message):
    allowed_charset = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#@!$%^&")
    if len(message) < 1 or len(message) > 100:
        return False
    if not set(message).issubset(allowed_charset):
        return False
    return True

def validate_pin(pin):
    if 0 <= pin <= 100:
        return True
    return False

def cipher_message(message, shift=3):
    # Caesar Cipher example with a shift
    result = []
    for char in message:
        if char.isalpha():
            shift_amount = shift % 26
            start = ord('A') if char.isupper() else ord('a')
            result.append(chr(start + (ord(char) - start + shift_amount) % 26))
        elif char.isdigit():
            result.append(chr((ord(char) - ord('0') + shift) % 10 + ord('0')))
        else:
            result.append(char)
    return ''.join(result)

def decipher_message(message, shift=3):
    # Reverse Caesar Cipher
    result = []
    for char in message:
        if char.isalpha():
            shift_amount = shift % 26
            start = ord('A') if char.isupper() else ord('a')
            result.append(chr(start + (ord(char) - start - shift_amount) % 26))
        elif char.isdigit():
            result.append(chr((ord(char) - ord('0') - shift) % 10 + ord('0')))
        else:
            result.append(char)
    return ''.join(result)

def create_qr_code(data, filename="qrcode.png"):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill='black', back_color='white')
    img.save(filename)

def main():
    while True:
        choice = input("Do you want to (1) Encode a message or (2) Decode a message? Enter 1 or 2: ")
        
        if choice == '1':  # Encoding
            username = input("Enter username: ")
            password = input("Enter password: ")
            
            # Simulate authentication
            authentication_complete = True
            
            if authentication_complete:
                message = input("Enter your message (1-100 characters, allowed chars a-z, A-Z, 0-9#@!$%^&): ")
                
                if validate_message(message):
                    pin = int(input("Enter your PIN (0-100): "))
                    
                    if validate_pin(pin):
                        ciphered_msg = cipher_message(message)
                        print(f"Ciphered Message: {ciphered_msg}")
                        create_qr_code(ciphered_msg)
                        print("QR code generated and saved as 'qrcode.png'")
                    else:
                        print("Error: PIN must be between 0 and 100.")
                else:
                    print("Error: Message must be 1-100 characters and use only allowed characters.")
            else:
                print("Authentication failed.")
        
        elif choice == '2':  # Decoding
            ciphered_msg = input("Enter the ciphered message to decode: ")
            shift = int(input("Enter the shift used for encoding: "))
            decoded_msg = decipher_message(ciphered_msg, shift)
            print(f"Decoded Message: {decoded_msg}")
        
        else:
            print("Invalid choice. Please enter 1 or 2.")
        
        run_again = input("Do you want to run again? (yes/no): ").strip().lower()
        if run_again != 'yes':
            break

if __name__ == "__main__":
    main()
